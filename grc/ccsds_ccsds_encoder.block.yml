# auto-generated by grc.converter

id: ccsds_ccsds_encoder
label: CCSDS Encoder
category: ccsds

parameters:
-   id: type
    label: Input type
    dtype: enum
    options: [message, byte]
    option_labels: [PDU Message, Tagged byte stream]
    option_attributes:
        size: ['0', gr.sizeof_char]
    hide: part
-   id: len_tag_key
    label: Length tag key
    dtype: string
    default: '"packet_len"'
-   id: rs_encode
    label: RS Encode
    dtype: enum
    default: 'True'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
-   id: interleave
    label: Interleave
    dtype: enum
    default: 'True'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
-   id: dual_basis
    label: Dual Basis
    dtype: enum
    default: 'True'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
-   id: scramble
    label: Scramble
    dtype: enum
    default: 'True'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
-   id: printing
    label: Print packets
    dtype: enum
    default: 'False'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
    hide: part
-   id: verbose
    label: Verbose
    dtype: enum
    default: 'False'
    options: ['True', 'False']
    option_labels: ['Yes', 'No']
    hide: part
-   id: n_interleave
    label: Interleave Count
    dtype: int
    default: '5'

inputs:
-   domain: stream
    dtype: ${ type }

outputs:
-   domain: stream
    dtype: byte
asserts:
- ${ (n_interleave > 0) and (n_interleave < 9) }

templates:
    imports: import ccsds
    make: ccsds.ccsds_encoder(${type.size}, ${len_tag_key}, ${rs_encode}, ${interleave},
        ${scramble}, ${printing}, ${verbose}, ${n_interleave}, ${dual_basis})

file_format: 1
