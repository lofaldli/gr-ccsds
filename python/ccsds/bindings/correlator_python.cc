/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(correlator.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(6263c7daf8f3852a252f66cc8f1b3fd0)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/ccsds/correlator.h>
// pydoc.h is automatically generated in the build directory
#include <correlator_pydoc.h>

void bind_correlator(py::module& m)
{

    using correlator    = ::gr::ccsds::correlator;


    py::class_<correlator, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<correlator>>(m, "correlator", D(correlator))

        .def(py::init(&correlator::make),
           py::arg("asm_") = 449838109,
           py::arg("asm_mask") = 4294967295U,
           py::arg("threshold") = 2,
           py::arg("frame_len") = 223,
           D(correlator,make)
        )
        




        
        .def("frame_count",&correlator::frame_count,       
            D(correlator,frame_count)
        )

        ;

    py::enum_<::gr::ccsds::state_t>(m,"state_t")
        .value("SEARCH", ::gr::ccsds::state_t::SEARCH) // 0
        .value("LOCK", ::gr::ccsds::state_t::LOCK) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::ccsds::state_t>();
    py::enum_<::gr::ccsds::ambiguity_t>(m,"ambiguity_t")
        .value("NONE", ::gr::ccsds::ambiguity_t::NONE) // 0
        .value("INVERTED", ::gr::ccsds::ambiguity_t::INVERTED) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::ccsds::ambiguity_t>();



}








